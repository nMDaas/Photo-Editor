The packages in this src file represent the model, controller and view of an Image
program. This image processing program can take ppm images from a file path and
edit the images based on user choice.

CONTROLLER PACKAGE

ImageProcessingController - This represents the interface of the program's
controller. This interface requires any implementation of ImageProcessingController to:
- process user input via the process() method until there is no more user input
- print messages via the printMessage() method to the program's ImageProcessingView
  implementation
- return the images stored by the ImageProcessingController via getImages()

ImageProcessingControllerImpl - This is an implementation of ImageProcessingController
that takes in an ImageProcessingView, Readable and Scanner. This is initialized
with a hashmap of known commands and can perform the following functionalities:
- process() - to continue taking input from the user until no input remains,
  execute commands based on user input, and throw exceptions if the user inputs
  invalid input
- printMessage() - to print any message to the ImageProcessingView and throw
  an IllegalStateException if there is an IOException
- getImages() - to return the images stored by the ImageProcessingController

CONTROLLER.COMMANDS PACKAGE

ImageProcessingCommand - This interface is an interface for all of
ImageProcessingControllerImpl's known commands based on user input. This
interface has only one method - go() - that executes the command.

Load - Load implements ImageProcessingCommand and saves an image to the file path
provided. If the file is invalid, a FileNotFoundException is thrown. If the image
name provided is an empty string, an IllegalArgumentException is thrown. If the
scanner runs out of input, an IllegalStateException is thrown. If anything other than
an Integer is input for the pixels, a NumberFormatException is thrown.

Save - Save implements ImageProcessingCommand and saves an image to the file path
provided. If the path is invalid, a FileNotFoundException is thrown. If the image
is not found, an IllegalArgumentException is thrown.

AbstractCommand - AbstractCommand implements ImageProcessingCommand and is
an abstract command for all commands except for Load and Save. This has two methods:
- go() - this creates a new edited model based on the command and adds it to the
  ImageProcessingController's hashmap of images
- doCommand() - a factory method that executes the command by calling the extended
  class, depending on whichever it is

RedComponent - RedComponent extends AbstractCommand. Its doCommand() implementation
returns the image with the red channel and prints a message of completion.

GreenComponent - GreenComponent extends AbstractCommand. Its doCommand() implementation
returns the image with a green channel and prints a message of completion.

BlueComponent - BlueComponent extends AbstractCommand. Its doCommand() implementation
returns the image with a blue channel and prints a message of completion.

ValueComponent - ValueComponent extends AbstractCommand. Its doCommand() implementation
returns a greyscale image created by calculating value and prints a message of completion.

IntensityComponent - IntensityComponent extends AbstractCommand. Its doCommand()
implementation returns a greyscale image created by calculating intensity and
prints a message of completion.

LumaComponent - LumaComponent extends AbstractCommand. Its doCommand() implementation
returns a greyscale image created by calculating luma and prints a message of completion.

Brighten - Brighten extends AbstractCommand. Its doCommand() implementation
returns an image with changed brightness and prints a message of completion.

HorizontalFlip - HorizontalFlip extends AbstractCommand. Its doCommand() implementation
returns an image horizontally flipped and prints a message of completion.

VerticalFlip - VerticalFlip extends AbstractCommand. Its doCommand() implementation
returns an image vertically flipped and prints a message of completion.

MODEL PACKAGE

ImageProcessingModel - This represents the interface of the model. It supports the
following methods:
- redComponent() - creates an image's red channel
- greenComponent() - creates an image's green channel
- blueComponent() - creates an image's blue channel
- valueComponent() - creates an image's greyscale based on value
- intensityComponent() - creates an image's greyscale based on intensity
- lumaComponent() - creates an image's greyscale based on luma
- brighten(int val) - creates an image that is brightened/darkened by a certain value
- flipHorizontal() - creates an image that is horizontally flipped
- flipVertical() - creates an image that is vertically flipped
- getWidth() - return's the image's width
- getHeight() - return's the image's height
- getPixelAt(int row, int col) - returns the pixel at a certain row and column
- setPixelAt(int row, int col, Pixel p) - sets the pixel at a certain row
  and column to a given pixel
- getMax() - returns the max value of a pixel in the image
- createCopy() - returns a copy of the ImageProcessingModel

ImageModel - ImageModel is an implementation of ImageProcessingModel and implements
all its inherited methods.

MODEL.COMMANDS PACKAGE

PixelWiseProcessor - PixelWise processor processes each image's pixels and supports the
following methods:
- go(ImageProcessingModel model) - this creates a new model and through a for loop,
  mutates each pixel by calling the abstract doCommand(Pixel p)
- doCommand(Pixel p) - this is a factory method that mutates p based on the command

ChangeBrightness - ChangeBrightness extends AbstractModelCommand. It implements
doCommand(Pixel p) that increases a single pixel's brightness.

ValueGreyscale - ValueGreyscale extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to greyscale based on value.

IntensityGreyscale - IntensityGreyscale extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to greyscale based on intensity.

LumaGreyscale - LumaGreyscale extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to greyscale based on luma.

MakeRed - MakeRed extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to a red channel.

MakeGreen - MakeGreen extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to a green channel.

MakeBlue - MakeBlue extends AbstractModelCommand. It implements
doCommand(Pixel p) that converts pixel p to a blue channel.

PIXELS PACKAGE

Pixel - This interface represents a pixel that can have multiple values.
Its implementations inherit the following methods:
- brighten(int val) - brightens the pixel by a value (positive or negative)
- setColor(int index) - channels the pixel based on an index that correlates to
  one of the pixel's value
- getColor(int index) - gets the value of one of the pixel's values,
  based on an index
- setValueComponent() - converts the pixel to greyscale based on value
- setIntensityComponent() - converts the pixel to greyscale based on intensity
- setLumaComponent() - converts the pixel to greyscale based on luma
- createCopy() - returns a copy of the Pixel

RGBPixel - RGBPixel implements the Pixel interface and represents a pixel that
is contains red, blue and green values. These colors are held in the colors array
where index 0 = red, index 1 = green, and index 2 = blue. RGBPixel implements all of
its inherited methods along with:
- setValue(int currentVal, int valAdd) - returns an int for the value of one of the
  pixel's values after increasing/decreasing while ensuring that this value, v is
  between 0 and 255 inclusive. If lesser than 0 or greater than 255, v is clipped at
  0 or 255 respectively. v is passed onto the brighten(int val) method
- findValue() - calculates the value of the pixel
- findIntensity() - calculates the intensity of the pixel
- findLuma() - calculates the luma of the pixel
- equals(Object that) - Overrides the equals method to set two pixels to be equal to
  each other if their r values, g values and b values are equal
- hashCode - Overrides the hashCode() method

VIEW PACKAGE

ImageProcessingView - This interface represents the view of the program. It only
supports one method - renderMessage(String message) that prints the message.

ImageProcessingViewImpl - ImageProcessingViewImpl implements ImageProcessingView. It
only takes in an appendable and only implements renderMessage(String message).
An IOException is thrown if there is one.

